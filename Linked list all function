#include <stdio.h>
#include <stdlib.h>

/* Structure of a node */
struct node {
    int data;          // Data
    struct node *next; // Address
}*head;


/*
 * Functions to create and display list
 */
void createList(int n);
void traverseList();
void append();
void addbegin();
int length();
void addmid(int len);
void deletenode(int len);
void reverse();
int search(int key,struct node* currNode,int index);
void swap(int loc);
int main()
{
    int n,len,searEle,find,loc;

    printf("Enter the total number of nodes: ");
    scanf("%d", &n);

    createList(n);

    printf("\nData in the list \n");
    traverseList();

    addbegin();

    printf("\nAfter append Data in the begin list \n");
    traverseList();

    append();

    printf("\nAfter append Data in the last list \n");
    traverseList();

    len=length();

    addmid(len);

    printf("\nAfter append Data in the mid list \n");
    traverseList();

    len=length();

    deletenode(len);

    printf("\nAfter Deleting data in the list\n");
    traverseList();

    reverse();

    printf("\nAfter Reversing the list\n");
    traverseList();

    printf("Enter the Element to search:");
    scanf("%d",&searEle);

    find=search(searEle,head,1);

    printf("%d element in the node %d\n",searEle,find);

    printf("Enter the swap location");
    scanf("%d",&loc);

    swap(loc);
    printf("\nAfter swap the list\n");
    traverseList();

    return 0;
}

/*
 * Create a list of n nodes
 */
void createList(int n)
{
    struct node *newNode, *temp;
    int data, i;

    head = (struct node *)malloc(sizeof(struct node));

    // Terminate if memory not allocated
    if(head == NULL)
    {
        printf("Unable to allocate memory.");
        exit(0);
    }


    // Input data of node from the user
    printf("Enter the data of node 1: ");
    scanf("%d", &data);

    head->data = data; // Link data field with data
    head->next = NULL; // Link address field to NULL


    // Create n - 1 nodes and add to list
    temp = head;
    for(i=2; i<=n; i++)
    {
        newNode = (struct node *)malloc(sizeof(struct node));

        /* If memory is not allocated for newNode */
        if(newNode == NULL)
        {
            printf("Unable to allocate memory.");
            break;
        }

        printf("Enter the data of node %d: ", i);
        scanf("%d", &data);

        newNode->data = data; // Link data field of newNode
        newNode->next = NULL; // Make sure new node points to NULL

        temp->next = newNode; // Link previous node with newNode
        temp = temp->next;    // Make current node as previous node
    }
}


/*
 * Display entire list
 */
void traverseList()
{
    struct node *temp;

    // Return if list is empty
    if(head == NULL)
    {
        printf("List is empty.");
        return;
    }

    temp = head;
    while(temp != NULL)
    {
        printf("Data = %d\n", temp->data); // Print data of current node
        temp = temp->next;                 // Move to next node
    }
}

void append()
{
    struct node*p,*secnode;
    int secval;
    secnode=(struct node*)malloc(sizeof(struct node));
    printf("Enter the new node value for end:");
    scanf("%d",&secval);
    secnode->data=secval;
    secnode->next=NULL;
    if(head == NULL)
    {
       printf("Unable to find");
    }else{
        p=head;
        while(p->next != NULL)
        {
            p=p->next;
        }
        p->next=secnode;
    }

}

void addbegin()
{
    struct node*p,*secnode;
    p=head;
    int secval;
    secnode=(struct node*)malloc(sizeof(struct node));
    printf("Enter the new node value for begin:");
    scanf("%d",&secval);
    secnode->data=secval;
    secnode->next=NULL;
    if(head==NULL)
    {
        head=secnode;
    }else{
        secnode->next=p;//right connect
        head=secnode;
    }
}

int length()
{
    struct node* temp;
    temp=head;
    int count=0;
    while(temp!=NULL)
    {
        count++;
        temp=temp->next;
    }
    printf("\nLength of the node: %d\n",count);
    return count;
}

void addmid(int len)
{
    struct node*p,*secnode;
    p=head;
    int secval,loc,curr=1;
    printf("Enter the location to insert the node:");
    scanf("%d",&loc);
    if(loc>len)
    {
        printf("Your exid the node locatio\n");
        printf("Currently %d node is there:",len);
    }else
    {
        secnode=(struct node*)malloc(sizeof(struct node));
        printf("Enter the new node value for mid:");
        scanf("%d",&secval);
        secnode->data=secval;
        secnode->next=NULL;
        while(curr<loc-1)
        {
            p=p->next;
            curr++;
        }
        secnode->next=p->next;
        p->next=secnode;
    }

}

void deletenode(int len)
{
    struct node* temp,*p;
    temp=p=head;
    int loc,i=1;
    printf("Enter the location to delete:");
    scanf("%d",&loc);
    if(loc>len)
    {
        printf("You are exist the number of node\n");
        printf("There is %d node\n",len);
    }else if(loc==1)
    {
        head=temp->next;
        temp->next=NULL;
    }else
    {
        while(i<loc-1)
        {
            temp=temp->next;
            i++;
        }
        p=temp->next;
        temp->next=p->next;
        p->next=NULL;
    }
}

void reverse()
{
   struct node *prevNode,*currNode;
   if(head != NULL)
   {
        prevNode=head;
       currNode=head->next;
       head=head->next;
       prevNode->next=NULL;
       while(head != NULL)
       {
       head=head->next;
       currNode->next=prevNode;
       prevNode=currNode;
       currNode=head;
       }
       head=prevNode;
   }
}

int search(int key,struct node* currNode,int index)
{
    if(currNode == NULL)
    {
        return 1;
    }else if(currNode->data == key){
        return index;
    }else{
        return search(key,currNode->next,index+1);
    }
}

void swap(int loc)
{
    struct node *p,*q,*r;
    p=head;
    int i=1;
    while(i<loc-1)
    {
        p=p->next;
        i++;
    }
    q=p->next;
    r=q->next;
    q->next=r->next;
    r->next=q;
    p->next=r;

}
